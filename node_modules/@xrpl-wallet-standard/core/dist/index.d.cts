import { IdentifierString, WalletAccount, StandardConnectFeature, StandardEventsFeature, WalletWithFeatures, Wallet } from '@wallet-standard/core';
export * from '@wallet-standard/core';
import { SubmittableTransaction, BaseTransaction, TxV1Response, Transaction } from 'xrpl';
import { Transaction as Transaction$1 } from '@transia/xrpl';

declare const XRPL_MAINNET: "xrpl:0";
declare const XRPL_TESTNET: "xrpl:1";
declare const XRPL_DEVNET: "xrpl:2";
declare const XAHAU_MAINNET: "xrpl:21337";
declare const XAHAU_TESTNET: "xrpl:21338";
declare const XRPL_NETWORKS: readonly ["xrpl:0", "xrpl:1", "xrpl:2"];
declare const XAHAU_NETWORKS: readonly ["xrpl:21337", "xrpl:21338"];
declare const XRPL_PROTOCOL_NETWORKS: readonly ["xrpl:0", "xrpl:1", "xrpl:2", "xrpl:21337", "xrpl:21338"];
type XRPLProtorcolNetwork = (typeof XRPL_PROTOCOL_NETWORKS)[number];
declare function isXRPLNetworks(network: IdentifierString): network is XRPLProtorcolNetwork;
type XRPLStandardIdentifier = `xrpl:${number}`;
type XRPLReserverdIdentifier = 'xrpl:mainnet' | 'xrpl:testnet' | 'xrpl:devnet' | 'xrpl:xahau-mainnet' | 'xrpl:xahau-testnet';
type XRPLIdentifierString = XRPLStandardIdentifier | XRPLReserverdIdentifier;
declare function convertNetworkToChainId(network: XRPLIdentifierString): `xrpl:${number}`;
declare function getNetworkWssEndpoint(network: XRPLIdentifierString): string | undefined;

type PrepearedTransaction$1 = SubmittableTransaction | BaseTransaction;
type XRPLSignTransactionVersion = '1.0.0';
type XRPLSignTransactionFeature = {
    'xrpl:signTransaction': {
        version: XRPLSignTransactionVersion;
        signTransaction: XRPLSignTransactionMethod;
    };
};
type XRPLSignTransactionMethod = (input: XRPLSignTransactionInput) => Promise<SignTransactionOutput>;
interface XRPLSignTransactionInput {
    tx_json: PrepearedTransaction$1;
    account: WalletAccount;
    network: XRPLIdentifierString;
    options?: SignTransactionOption;
}
interface SignTransactionOutput {
    signed_tx_blob: string;
}
interface SignTransactionOption {
    autofill?: boolean;
    multisig?: boolean;
}

type PrepearedTransaction = SubmittableTransaction | BaseTransaction;
type XRPLSignAndSubmitTransactionVersion = '1.0.0';
type XRPLSignAndSubmitTransactionFeature = {
    'xrpl:signAndSubmitTransaction': {
        version: XRPLSignAndSubmitTransactionVersion;
        signAndSubmitTransaction: XRPLSignAndSubmitTransactionMethod;
    };
};
type XRPLSignAndSubmitTransactionMethod = (input: XRPLSignAndSubmitTransactionInput) => Promise<SignAndSubmitTransactionOutput>;
interface XRPLSignAndSubmitTransactionInput {
    tx_json: PrepearedTransaction;
    account: WalletAccount;
    network: XRPLIdentifierString;
    options?: SignAndSubmitTransactionOption;
}
interface SignAndSubmitTransactionOutput {
    tx_hash: string;
    tx_json: TxV1Response<Transaction | Transaction$1>['result'];
}
interface SignAndSubmitTransactionOption {
    autofill?: boolean;
    multisig?: boolean;
}

declare const REQUIRED_FEATURES: readonly ["standard:connect", "standard:events", "xrpl:signTransaction", "xrpl:signAndSubmitTransaction"];
type RequiredFetures = StandardConnectFeature & StandardEventsFeature & XRPLSignTransactionFeature & XRPLSignAndSubmitTransactionFeature;
type XRPLWallet = WalletWithFeatures<RequiredFetures>;
declare function isXRPLWallet(wallet: Wallet): wallet is XRPLWallet;
declare function isWalletWithRequiredFeatureSet<AdditionalFeatures extends Wallet['features']>(wallet: Wallet, additionalFeatures?: (keyof AdditionalFeatures)[]): wallet is WalletWithFeatures<RequiredFetures & AdditionalFeatures>;

export { type PrepearedTransaction$1 as PrepearedTransaction, REQUIRED_FEATURES, type RequiredFetures, type SignAndSubmitTransactionOption, type SignAndSubmitTransactionOutput, type SignTransactionOption, type SignTransactionOutput, XAHAU_MAINNET, XAHAU_NETWORKS, XAHAU_TESTNET, type XRPLIdentifierString, type XRPLProtorcolNetwork, type XRPLReserverdIdentifier, type XRPLSignAndSubmitTransactionFeature, type XRPLSignAndSubmitTransactionInput, type XRPLSignAndSubmitTransactionMethod, type XRPLSignAndSubmitTransactionVersion, type XRPLSignTransactionFeature, type XRPLSignTransactionInput, type XRPLSignTransactionMethod, type XRPLSignTransactionVersion, type XRPLStandardIdentifier, type XRPLWallet, XRPL_DEVNET, XRPL_MAINNET, XRPL_NETWORKS, XRPL_PROTOCOL_NETWORKS, XRPL_TESTNET, convertNetworkToChainId, getNetworkWssEndpoint, isWalletWithRequiredFeatureSet, isXRPLNetworks, isXRPLWallet };
