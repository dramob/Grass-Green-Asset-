'use strict';

var core = require('@wallet-standard/core');

const XRPL_MAINNET = "xrpl:0";
const XRPL_TESTNET = "xrpl:1";
const XRPL_DEVNET = "xrpl:2";
const XAHAU_MAINNET = "xrpl:21337";
const XAHAU_TESTNET = "xrpl:21338";
const XRPL_NETWORKS = [XRPL_MAINNET, XRPL_TESTNET, XRPL_DEVNET];
const XAHAU_NETWORKS = [XAHAU_MAINNET, XAHAU_TESTNET];
const XRPL_PROTOCOL_NETWORKS = [...XRPL_NETWORKS, ...XAHAU_NETWORKS];
function isXRPLNetworks(network) {
  return XRPL_PROTOCOL_NETWORKS.includes(network);
}
function convertNetworkToChainId(network) {
  switch (network) {
    case "xrpl:mainnet":
      return XRPL_MAINNET;
    case "xrpl:testnet":
      return XRPL_TESTNET;
    case "xrpl:devnet":
      return XRPL_DEVNET;
    case "xrpl:xahau-mainnet":
      return XAHAU_MAINNET;
    case "xrpl:xahau-testnet":
      return XAHAU_TESTNET;
  }
  return network;
}
function getNetworkWssEndpoint(network) {
  const chainId = convertNetworkToChainId(network);
  switch (chainId) {
    case XRPL_MAINNET:
      return "wss://xrplcluster.com";
    case XRPL_TESTNET:
      return "wss://s.altnet.rippletest.net:51233/";
    case XRPL_DEVNET:
      return "wss://s.devnet.rippletest.net:51233/";
    case XAHAU_MAINNET:
      return "wss://xahau.org";
    case XAHAU_TESTNET:
      return "wss://xahau-test.net";
    default:
      return void 0;
  }
}

const REQUIRED_FEATURES = [
  "standard:connect",
  "standard:events",
  "xrpl:signTransaction",
  "xrpl:signAndSubmitTransaction"
];
function isXRPLWallet(wallet) {
  return isWalletWithRequiredFeatureSet(wallet);
}
function isWalletWithRequiredFeatureSet(wallet, additionalFeatures = []) {
  return [...REQUIRED_FEATURES, ...additionalFeatures].every((feature) => feature in wallet.features);
}

exports.REQUIRED_FEATURES = REQUIRED_FEATURES;
exports.XAHAU_MAINNET = XAHAU_MAINNET;
exports.XAHAU_NETWORKS = XAHAU_NETWORKS;
exports.XAHAU_TESTNET = XAHAU_TESTNET;
exports.XRPL_DEVNET = XRPL_DEVNET;
exports.XRPL_MAINNET = XRPL_MAINNET;
exports.XRPL_NETWORKS = XRPL_NETWORKS;
exports.XRPL_PROTOCOL_NETWORKS = XRPL_PROTOCOL_NETWORKS;
exports.XRPL_TESTNET = XRPL_TESTNET;
exports.convertNetworkToChainId = convertNetworkToChainId;
exports.getNetworkWssEndpoint = getNetworkWssEndpoint;
exports.isWalletWithRequiredFeatureSet = isWalletWithRequiredFeatureSet;
exports.isXRPLNetworks = isXRPLNetworks;
exports.isXRPLWallet = isXRPLWallet;
Object.keys(core).forEach(function (k) {
  if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () { return core[k]; }
  });
});
