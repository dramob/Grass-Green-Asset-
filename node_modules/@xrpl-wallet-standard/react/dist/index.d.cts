import * as react_jsx_runtime from 'react/jsx-runtime';
import * as _wallet_standard_core from '@wallet-standard/core';
import * as _xrpl_wallet_standard_app from '@xrpl-wallet-standard/app';
import { XRPLWallet, StandardConnectInput, PrepearedTransaction, XRPLIdentifierString } from '@xrpl-wallet-standard/app';
import { ReactNode } from 'react';

declare const ConnectButton: (props: React.ButtonHTMLAttributes<HTMLButtonElement>) => react_jsx_runtime.JSX.Element;

declare const useAccount: () => _wallet_standard_core.WalletAccount | null;

declare const useAccounts: () => readonly _wallet_standard_core.WalletAccount[];

type WalletConnectionStatus = 'disconnected' | 'connecting' | 'connected';

declare const useConnect: () => {
    connect: (wallet: XRPLWallet, input?: StandardConnectInput) => Promise<void>;
    status: WalletConnectionStatus;
};

declare const useConnectionStatus: () => WalletConnectionStatus;

declare const useDisconnect: () => () => Promise<void>;

declare const useSignAndSubmitTransaction: () => (transaction: PrepearedTransaction, network: XRPLIdentifierString) => Promise<_xrpl_wallet_standard_app.SignAndSubmitTransactionOutput>;

declare const useSignTransaction: () => (transaction: PrepearedTransaction, network: XRPLIdentifierString) => Promise<_xrpl_wallet_standard_app.SignTransactionOutput>;

type UseWalletResult = {
    wallet: XRPLWallet | null;
    status: WalletConnectionStatus;
};
declare const useWallet: () => UseWalletResult;

declare const useWallets: () => _xrpl_wallet_standard_app.XRPLWallet[];

type WalletProviderProps = {
    preferredWallets?: string[];
    autoConnect?: boolean;
    registerWallets?: XRPLWallet[];
    children: ReactNode;
};
declare function WalletProvider({ autoConnect, registerWallets, children }: WalletProviderProps): react_jsx_runtime.JSX.Element;

export { ConnectButton, WalletProvider, type WalletProviderProps, useAccount, useAccounts, useConnect, useConnectionStatus, useDisconnect, useSignAndSubmitTransaction, useSignTransaction, useWallet, useWallets };
